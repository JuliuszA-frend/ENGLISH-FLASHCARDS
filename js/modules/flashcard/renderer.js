/**
 * FlashcardRenderer - G≈Ç√≥wny renderer fiszek
 * ≈ÅƒÖczy wszystkie modu≈Çy i renderuje karty w r√≥≈ºnych trybach
 * U≈ªYWA: FlashcardTemplates, DOMHelper, ImageHandler, AudioHandler, Controls
 */

// üéØ IMPORT wszystkich potrzebnych modu≈Ç√≥w
import FlashcardTemplates from './templates.js';
import DOMHelper from './dom-helper.js';
import FlashcardImageHandler from './image-handler.js';
import FlashcardAudioHandler from './audio-handler.js';
import FlashcardControls from './controls.js';

class FlashcardRenderer {
    constructor() {
        this.vocabulary = null;
        this.currentWord = null;
        this.showPhonetics = true;
        
        // Inicjalizacja handler'√≥w (bƒôdƒÖ skonfigurowane przez setManagers)
        this.imageHandler = null;
        this.audioHandler = null;
        this.controls = new FlashcardControls();
    }

    /**
     * üîß Ustawienie s≈Çownictwa
     */
    setVocabulary(vocabulary) {
        this.vocabulary = vocabulary;
        console.log('üìö FlashcardRenderer otrzyma≈Ç s≈Çownictwo');
    }

    /**
     * üîß Ustawienie mened≈ºer√≥w zewnƒôtrznych (image, audio, progress)
     */
    setManagers(imageManager, audioManager, progressManager) {
        // Konfiguruj handlery z mened≈ºerami
        this.imageHandler = new FlashcardImageHandler(imageManager);
        this.audioHandler = new FlashcardAudioHandler(audioManager);
        this.controls.setProgressManager(progressManager);
        
        console.log('üîß FlashcardRenderer skonfigurowany z mened≈ºerami');
    }

    /**
     * üîß Ustawienie czy pokazywaƒá fonetykƒô
     */
    setShowPhonetics(show) {
        this.showPhonetics = show;
        if (this.currentWord) {
            this.updatePhoneticDisplay();
        }
    }

    /**
     * üì± G≈Å√ìWNA METODA - Wy≈õwietlenie s≈Çowa na karcie
     */
    displayWord(word, mode = 'flashcards') {
        this.currentWord = word;
        
        console.log(`üì± FlashcardRenderer wy≈õwietla s≈Çowo: ${word.english} (${mode})`);
        
        switch (mode) {
            case 'flashcards':
                this.displayFlashcard(word);
                break;
            case 'sentences':
                this.displaySentenceCard(word);
                break;
            default:
                this.displayFlashcard(word);
        }
    }

    /**
     * üéØ Renderowanie standardowej fiszki
     */
    displayFlashcard(word) {
        const cardFront = document.getElementById('card-front');
        const cardBack = document.getElementById('card-back');

        if (!cardFront || !cardBack) {
            console.error('‚ùå Nie znaleziono element√≥w karty');
            return;
        }

        // Wyczy≈õƒá poprzedniƒÖ zawarto≈õƒá
        DOMHelper.clearContainer(cardFront);
        DOMHelper.clearContainer(cardBack);

        // Zbuduj prz√≥d i ty≈Ç karty
        this.buildCardFront(cardFront, word);
        this.buildCardBack(cardBack, word);
    }

    /**
     * üéØ Renderowanie karty z przyk≈Çadami zda≈Ñ
     */
    displaySentenceCard(word) {
        const cardFront = document.getElementById('card-front');
        const cardBack = document.getElementById('card-back');

        if (!cardFront || !cardBack) {
            console.error('‚ùå Nie znaleziono element√≥w karty');
            return;
        }

        DOMHelper.clearContainer(cardFront);
        DOMHelper.clearContainer(cardBack);

        this.buildSentenceFront(cardFront, word);
        this.buildSentenceBack(cardBack, word);
    }

    /**
     * üèóÔ∏è Budowanie przodu standardowej karty
     */
    buildCardFront(container, word) {
        // 1. Obrazek (je≈õli dostƒôpny)
        if (this.imageHandler) {
            this.imageHandler.addImageSection(container, word);
        }

        // 2. Typ s≈Çowa
        if (word.type) {
            const typeEl = DOMHelper.createElementFromHTML(
                FlashcardTemplates.getWordTypeElement(word.type)
            );
            container.appendChild(typeEl);
        }

        // 3. G≈Ç√≥wne angielskie s≈Çowo
        const englishEl = DOMHelper.createElement('div', 'english-word', word.english);
        container.appendChild(englishEl);

        // 4. Badge trudno≈õci
        const currentDifficulty = this.controls.getWordDifficulty(word);
        if (currentDifficulty) {
            const difficultyEl = DOMHelper.createElementFromHTML(
                FlashcardTemplates.getDifficultyBadge(currentDifficulty)
            );
            container.appendChild(difficultyEl);
        }

        // 5. Badge czƒôstotliwo≈õci
        if (word.frequency) {
            const frequencyEl = DOMHelper.createElementFromHTML(
                FlashcardTemplates.getFrequencyBadge(word.frequency)
            );
            container.appendChild(frequencyEl);
        }
    }

    /**
     * üèóÔ∏è Budowanie ty≈Çu standardowej karty
     */
    buildCardBack(container, word) {
        // 1. Polskie t≈Çumaczenie
        const polishEl = DOMHelper.createElement('div', 'polish-translation', word.polish);
        container.appendChild(polishEl);

        // 2. Wymowa
        if (word.pronunciation) {
            const pronunciationEl = DOMHelper.createElement('div', 'pronunciation', word.pronunciation);
            container.appendChild(pronunciationEl);
        }

        // 3. Fonetyka (je≈õli w≈ÇƒÖczona)
        if (this.showPhonetics && word.phonetic) {
            const phoneticEl = DOMHelper.createElement('div', 'phonetic', word.phonetic);
            container.appendChild(phoneticEl);
        }

        // 4. Przyk≈Çad zdania
        if (word.examples) {
            const exampleData = this.getExampleData(word.examples);
            if (exampleData) {
                this.addExampleSection(container, exampleData);
            }
        }

        // 5. Synonimy i antonimy
        if (word.synonyms || word.antonyms) {
            const relatedWordsEl = DOMHelper.createElementFromHTML(
                FlashcardTemplates.getRelatedWordsSection(word)
            );
            container.appendChild(relatedWordsEl);
        }

        // 6. Przycisk audio
        if (word.english && this.audioHandler) {
            this.audioHandler.addAudioButton(container, word.english, 'word');
        }

        // 7. Kontrolki s≈Çowa (trudno≈õƒá, bookmark)
        if (this.controls) {
            this.controls.addWordControls(container, word);
        }
    }

    /**
     * üèóÔ∏è Budowanie przodu karty zdaniowej
     */
    buildSentenceFront(container, word) {
        if (!word.examples) {
            console.warn('‚ö†Ô∏è S≈Çowo nie ma przyk≈Çad√≥w zda≈Ñ');
            return;
        }

        // 1. Nag≈Ç√≥wek
        const headerEl = DOMHelper.createElementFromHTML(
            FlashcardTemplates.getSentenceHeader()
        );
        container.appendChild(headerEl);

        // 2. Angielskie zdanie
        const sentenceEl = DOMHelper.createElement('div', 'sentence-english', word.examples.english);
        container.appendChild(sentenceEl);

        // 3. Pod≈õwietl g≈Ç√≥wne s≈Çowo w zdaniu
        DOMHelper.highlightWordInSentence(sentenceEl, word.english);

        // 4. Kontekst s≈Çowa
        const contextEl = DOMHelper.createElementFromHTML(
            FlashcardTemplates.getWordContext(word)
        );
        container.appendChild(contextEl);
    }

    /**
     * üèóÔ∏è Budowanie ty≈Çu karty zdaniowej
     */
    buildSentenceBack(container, word) {
        if (!word.examples) {
            console.warn('‚ö†Ô∏è S≈Çowo nie ma przyk≈Çad√≥w zda≈Ñ');
            return;
        }

        // 1. Polskie t≈Çumaczenie zdania
        const polishSentenceEl = DOMHelper.createElement('div', 'sentence-polish', word.examples.polish);
        container.appendChild(polishSentenceEl);

        // 2. Szczeg√≥≈Çy s≈Çowa
        const detailsEl = DOMHelper.createElementFromHTML(
            FlashcardTemplates.getWordDetails(word)
        );
        container.appendChild(detailsEl);

        // 3. Przycisk audio dla s≈Çowa
        if (word.english && this.audioHandler) {
            this.audioHandler.addAudioButton(container, word.english, 'word');
        }
    }

    /**
     * üîß Pomocnicza metoda - Pobieranie danych przyk≈Çadu (kompatybilno≈õƒá z nowƒÖ i starƒÖ strukturƒÖ)
     */
    getExampleData(examples) {
        if (!examples) {
            return null;
        }

        // Je≈õli examples to tablica (nowa struktura)
        if (Array.isArray(examples)) {
            if (examples.length === 0) {
                console.warn('‚ö†Ô∏è Tablica examples jest pusta');
                return null;
            }
            
            // Wybierz pierwszy przyk≈Çad (lub mo≈ºna losowy)
            const firstExample = examples[0];
            console.log(`üìù Wybrano pierwszy przyk≈Çad z ${examples.length} dostƒôpnych: "${firstExample.english}"`);
            
            return {
                english: firstExample.english,
                polish: firstExample.polish,
                id: firstExample.id,
                context: firstExample.context,
                difficulty: firstExample.difficulty
            };
        }
        
        // Je≈õli examples to obiekt (stara struktura)
        if (examples.english && examples.polish) {
            console.log('üìù U≈ºywam starƒÖ strukturƒô examples (obiekt)');
            return {
                english: examples.english,
                polish: examples.polish
            };
        }
        
        console.warn('‚ö†Ô∏è Nierozpoznana struktura examples:', examples);
        return null;
    }

    /**
     * üìù Dodawanie sekcji przyk≈Çadu zdania (dla standardowej karty)
     */
    addExampleSection(container, examples) {
        // Kontener dla przyk≈Çadu
        const exampleEl = DOMHelper.createElement('div', 'example-sentence');
        
        // Angielskie i polskie zdanie
        const exampleHTML = FlashcardTemplates.getExampleSection(examples);
        exampleEl.innerHTML = exampleHTML;
        
        // Przycisk audio dla zdania
        if (examples.english && this.audioHandler) {
            this.audioHandler.addAudioButton(exampleEl, examples.english, 'sentence');
        }
        
        container.appendChild(exampleEl);
    }

    /**
     * üîÑ Aktualizacja wy≈õwietlania fonetyki
     */
    updatePhoneticDisplay() {
        const phoneticEl = document.querySelector('.phonetic');
        if (phoneticEl) {
            phoneticEl.style.display = this.showPhonetics ? 'block' : 'none';
        }
    }

    /**
     * üîä Auto-play audio je≈õli w≈ÇƒÖczone
     */
    autoPlayAudio(text) {
        if (this.audioHandler) {
            this.audioHandler.autoPlayAudio(text);
        }
    }

    /**
     * üß™ Test audio dla bie≈ºƒÖcego s≈Çowa
     */
    async testCurrentWordAudio() {
        if (this.audioHandler && this.currentWord) {
            return await this.audioHandler.testCurrentWordAudio(this.currentWord);
        }
        return false;
    }

    /**
     * üîÑ Toggle auto-play
     */
    toggleAutoPlay() {
        if (this.audioHandler) {
            return this.audioHandler.toggleAutoPlay();
        }
        return false;
    }

    /**
     * üîÑ Od≈õwie≈ºenie stanu przycisk√≥w (po zmianach zewnƒôtrznych)
     */
    refreshButtonStates(word) {
        if (this.controls && word) {
            this.controls.refreshDifficultyState(word);
            this.controls.refreshBookmarkState(word);
        }
    }

    /**
     * üßπ Czyszczenie zasob√≥w
     */
    cleanup() {
        this.vocabulary = null;
        this.currentWord = null;
        this.imageHandler = null;
        this.audioHandler = null;
        this.controls = null;
        
        console.log('üßπ FlashcardRenderer wyczyszczony');
    }
}

// üéØ EXPORT
export default FlashcardRenderer;