/**
 * QuizStorage - ZarzƒÖdzanie zapisywania/≈Çadowania wynik√≥w quiz√≥w
 */
class QuizStorage {
    constructor() {
        this.storageKey = 'english-flashcards-quiz-results';
        this.usedQuestionsKey = 'english-flashcards-used-questions';
        this.debugMode = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
        this.allResults = {};
        
        this.verifyStorageKey();
        this.loadAllResults();
    }

    /**
     * Weryfikacja klucza localStorage
     */
    verifyStorageKey() {
        console.log(`üîë QuizStorage u≈ºywa klucza: "${this.storageKey}"`);
        
        // Sprawd≈∫ czy nie ma danych pod alternatywnymi kluczami
        const alternativeKeys = [
            'quiz-results',
            'english-flashcards-quizzes',
            'flashcards-quiz-results',
            'quiz-data'
        ];
        
        alternativeKeys.forEach(key => {
            const data = localStorage.getItem(key);
            if (data) {
                console.warn(`‚ö†Ô∏è Znaleziono dane pod alternatywnym kluczem: "${key}"`);
                console.log(`üì¶ Dane: ${data.substring(0, 100)}...`);
            }
        });
        
        // Sprawd≈∫ wszystkie klucze w localStorage
        const allKeys = Object.keys(localStorage);
        const quizRelatedKeys = allKeys.filter(key => 
            key.toLowerCase().includes('quiz') || 
            key.toLowerCase().includes('result')
        );
        
        if (quizRelatedKeys.length > 0) {
            console.log(`üîç Klucze zwiƒÖzane z quizami w localStorage:`, quizRelatedKeys);
        }
    }

    /**
     * ≈Åadowanie wszystkich wynik√≥w z localStorage
     */
    loadAllResults() {
        try {
            const existingResults = this.loadQuizResults();
            this.allResults = existingResults;
            
            const resultsCount = Object.keys(this.allResults).length;
            
            if (this.debugMode) {
                console.group('üéØ QuizStorage - Inicjalizacja wynik√≥w');
                console.log(`üìä Za≈Çadowano ${resultsCount} typ√≥w quiz√≥w z localStorage`);
                console.log('üîë Klucze wynik√≥w:', Object.keys(this.allResults));
                console.groupEnd();
            }
        } catch (error) {
            console.error('‚ùå B≈ÇƒÖd inicjalizacji wynik√≥w quiz√≥w:', error);
            this.allResults = {};
        }
    }

    /**
     * Zapisywanie wynik√≥w quizu
     */
    saveQuizResults(results) {
        console.group('üíæ QuizStorage - Zapis wynik√≥w');
        
        try {
            if (!results || !results.quizType || !results.category) {
                console.error('‚ùå Nieprawid≈Çowe dane wynik√≥w:', results);
                return false;
            }
            
            const key = `${results.quizType}_${results.category}`;
            console.log(`üîë Klucz zapisu: "${key}"`);
            
            // Modyfikuj bezpo≈õrednio stan w pamiƒôci
            if (!this.allResults[key]) {
                this.allResults[key] = [];
            }
            
            this.allResults[key].push(results);
            
            // Przycinanie do 10 ostatnich wynik√≥w
            if (this.allResults[key].length > 10) {
                this.allResults[key] = this.allResults[key].slice(-10);
            }
            
            // Zapisz ca≈Çy obiekt do localStorage
            const dataToSave = JSON.stringify(this.allResults);
            localStorage.setItem(this.storageKey, dataToSave);
            
            console.log(`‚úÖ Zapisano stan z ${Object.keys(this.allResults).length} kluczami do localStorage.`);
            
            // Weryfikacja zapisu
            const verification = localStorage.getItem(this.storageKey);
            if (!verification || verification.length !== dataToSave.length) {
                console.error(`‚ùå B≈ÅƒÑD: Weryfikacja zapisu w localStorage nie powiod≈Ça siƒô!`);
                return false;
            }
            
            // Wy≈õlij event o zapisaniu
            document.dispatchEvent(new CustomEvent('quizResultsSaved', { detail: { key, results } }));
            
            console.groupEnd();
            return true;
            
        } catch (error) {
            console.error('üí• KRYTYCZNY B≈ÅƒÑD zapisywania wynik√≥w quizu:', error);
            console.groupEnd();
            return false;
        }
    }

    /**
     * ≈Åadowanie wynik√≥w quiz√≥w
     */
    loadQuizResults() {
        console.group('üìö QuizStorage - ≈Åadowanie wynik√≥w');
        
        try {
            console.log(`üîë ≈Åadujƒô z klucza: "${this.storageKey}"`);
            
            // Sprawd≈∫ dostƒôpno≈õƒá localStorage
            if (typeof Storage === 'undefined') {
                console.error('‚ùå localStorage nie jest dostƒôpne w tej przeglƒÖdarce');
                console.groupEnd();
                return {};
            }
            
            // Sprawd≈∫ wszystkie klucze w localStorage
            const allKeys = Object.keys(localStorage);
            console.log(`üóÇÔ∏è Wszystkie klucze w localStorage: [${allKeys.join(', ')}]`);
            
            const quizKeys = allKeys.filter(key => key.includes('quiz') || key.includes('result'));
            if (quizKeys.length > 0) {
                console.log(`üéØ Klucze zwiƒÖzane z quizami: [${quizKeys.join(', ')}]`);
            }
            
            // Pobierz dane
            const saved = localStorage.getItem(this.storageKey);
            
            if (!saved) {
                console.log(`üì≠ Brak danych pod kluczem "${this.storageKey}"`);
                console.log(`üîç Sprawdzam localStorage.length: ${localStorage.length}`);
                
                // Test localStorage
                const testKey = 'test-' + Date.now();
                const testValue = 'test-value';
                
                try {
                    localStorage.setItem(testKey, testValue);
                    const testResult = localStorage.getItem(testKey);
                    localStorage.removeItem(testKey);
                    
                    if (testResult === testValue) {
                        console.log(`‚úÖ localStorage dzia≈Ça poprawnie (test passed)`);
                    } else {
                        console.error(`‚ùå localStorage test failed: expected "${testValue}", got "${testResult}"`);
                    }
                } catch (testError) {
                    console.error(`‚ùå localStorage test error:`, testError);
                }
                
                console.groupEnd();
                return {};
            }
            
            console.log(`üì¶ Rozmiar pobranych danych: ${saved.length} znak√≥w`);
            console.log(`üìÑ Pierwsze 200 znak√≥w:`, saved.substring(0, 200));
            
            // Parsuj dane
            const parsed = JSON.parse(saved);
            const keys = Object.keys(parsed);
            
            console.log(`üîë Znajdowane klucze w danych: [${keys.join(', ')}]`);
            console.log(`üìä Liczba kategorii z wynikami: ${keys.length}`);
            
            // Szczeg√≥≈Çy ka≈ºdego klucza
            keys.forEach(key => {
                const results = parsed[key];
                if (Array.isArray(results)) {
                    console.log(`üìã ${key}: ${results.length} wynik√≥w, najnowszy: ${results[results.length - 1]?.completedAt || 'brak daty'}`);
                } else {
                    console.warn(`‚ö†Ô∏è ${key}: nieprawid≈Çowy format (nie jest tablicƒÖ)`);
                }
            });
            
            console.log(`‚úÖ ≈Åadowanie zako≈Ñczone sukcesem`);
            console.groupEnd();
            return parsed;
            
        } catch (error) {
            console.error('üí• KRYTYCZNY B≈ÅƒÑD ≈Çadowania wynik√≥w quiz√≥w:', error);
            console.error('üìã Stack trace:', error.stack);
            console.groupEnd();
            return {};
        }
    }

    /**
     * Pobranie wynik√≥w dla konkretnej kategorii
     */
    getCategoryResults(category, quizType = 'category') {
        try {
            const key = `${quizType}_${category}`;
            const results = this.allResults[key] || [];
            
            if (results.length === 0) {
                return null;
            }
            
            // Zwr√≥ƒá najlepszy wynik
            return results.reduce((best, current) => 
                current.score > best.score ? current : best
            );
        } catch (error) {
            console.error(`‚ùå B≈ÇƒÖd pobierania wynik√≥w dla kategorii "${category}":`, error);
            return null;
        }
    }

    /**
     * Statystyki og√≥lne
     */
    getOverallStats(vocabulary) {
        let totalQuizzes = 0;
        let totalScore = 0;
        let totalPossible = 0;
        let completedCategories = 0;

        Object.entries(this.allResults).forEach(([key, results]) => {
            if (Array.isArray(results) && results.length > 0) {
                // Znajd≈∫ najlepszy wynik dla ka≈ºdego klucza
                const bestResult = results.reduce((best, current) => 
                    current.score > best.score ? current : best
                );

                totalQuizzes++;
                totalScore += bestResult.score;
                totalPossible += bestResult.total;

                // Sprawd≈∫ czy kategoria zaliczona
                if (bestResult.passed && key.startsWith('category')) {
                    completedCategories++;
                }
            }
        });

        const averageScore = totalPossible > 0 ? Math.round((totalScore / totalPossible) * 100) : 0;

        return {
            totalQuizzes,
            averageScore,
            completedCategories,
            totalCategories: Object.keys(vocabulary?.categories || {}).length
        };
    }

    /**
     * Liczba uko≈Ñczonych kategorii
     */
    getCompletedCategoriesCount() {
        let count = 0;

        Object.entries(this.allResults).forEach(([key, results]) => {
            if (key.startsWith('category') && Array.isArray(results) && results.length > 0) {
                const bestResult = results.reduce((best, current) => 
                    current.score > best.score ? current : best
                );
                if (bestResult.passed) {
                    count++;
                }
            }
        });

        return count;
    }

    /**
     * Export danych
     */
    exportData() {
        return {
            quizResults: this.allResults,
            timestamp: new Date().toISOString()
        };
    }

    /**
     * Import danych
     */
    importData(data) {
        if (data.quizResults) {
            this.allResults = data.quizResults;
            localStorage.setItem(this.storageKey, JSON.stringify(this.allResults));
            return true;
        }
        return false;
    }

    /**
     * Reset wszystkich danych
     */
    reset() {
        localStorage.removeItem(this.storageKey);
        localStorage.removeItem(this.usedQuestionsKey);
        this.allResults = {};
        return true;
    }

    /**
     * Pobranie wszystkich wynik√≥w (getter)
     */
    get results() {
        return this.allResults;
    }
}

// Export
if (typeof module !== 'undefined' && module.exports) {
    module.exports = QuizStorage;
}