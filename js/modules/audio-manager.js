/**
 * AudioManager - ZarzƒÖdzanie audio (NAPRAWIONA WERSJA)
 */
class AudioManager {
    constructor() {
        this.audioCache = new Map();
        this.isPlaying = false;
        this.autoPlay = false;
        this.volume = 1.0;
        this.currentAudio = null;
        this.voiceSettings = {
            rate: 1.0,
            pitch: 1.0,
            voice: null
        };
        
        this.initializeSpeechSynthesis();
        console.log('üîä AudioManager zainicjalizowany');
    }

    /**
     * Inicjalizacja Speech Synthesis API
     */
    initializeSpeechSynthesis() {
        if ('speechSynthesis' in window) {
            this.speechSynthesis = window.speechSynthesis;
            
            // Za≈Çaduj g≈Çosy po za≈Çadowaniu
            this.loadVoices();
            
            // Voices mogƒÖ byƒá ≈Çadowane asynchronicznie
            if (speechSynthesis.onvoiceschanged !== undefined) {
                speechSynthesis.onvoiceschanged = () => {
                    this.loadVoices();
                };
            }
            
            console.log('‚úÖ Speech Synthesis API dostƒôpne');
        } else {
            console.warn('‚ö†Ô∏è Speech Synthesis API nie jest dostƒôpne');
        }
    }

    /**
     * ≈Åadowanie dostƒôpnych g≈Ços√≥w
     */
    loadVoices() {
        if (!this.speechSynthesis) return;
        
        const voices = this.speechSynthesis.getVoices();
        console.log(`üì¢ Dostƒôpne g≈Çosy: ${voices.length}`);
        
        // Znajd≈∫ angielski g≈Ços (preferuj US, potem UK, potem inne)
        const englishVoices = voices.filter(voice => voice.lang.startsWith('en'));
        
        if (englishVoices.length > 0) {
            // Preferuj kolejno≈õƒá: en-US > en-GB > inne
            const priorities = ['en-US', 'en-GB', 'en-AU', 'en-CA', 'en'];
            
            for (const lang of priorities) {
                const voice = englishVoices.find(v => v.lang.startsWith(lang));
                if (voice) {
                    this.voiceSettings.voice = voice;
                    console.log(`üé§ Wybrany g≈Ços: ${voice.name} (${voice.lang})`);
                    break;
                }
            }
            
            if (!this.voiceSettings.voice) {
                this.voiceSettings.voice = englishVoices[0];
                console.log(`üé§ Domy≈õlny g≈Ços: ${englishVoices[0].name}`);
            }
        } else {
            console.warn('‚ö†Ô∏è Brak dostƒôpnych g≈Ços√≥w angielskich');
        }
    }

    /**
     * G≈Ç√≥wna metoda odtwarzania audio
     */
    async playAudio(text, options = {}, buttonSelector = null) {
        if (!text || this.isPlaying) {
            console.log('Audio ju≈º odtwarzane lub brak tekstu');
            return false;
        }

        console.log(`üîä Pr√≥ba odtworzenia: "${text}"`);
        
        try {
            this.isPlaying = true;
            this.updateAudioButton('loading', '‚è≥ ≈Åadowanie...', buttonSelector);

            let success = false;

            // 1. Najpierw pr√≥buj Speech Synthesis (najszybsze)
            if (this.speechSynthesis && this.voiceSettings.voice) {
                console.log('üé§ Pr√≥bujƒô Speech Synthesis...');
                success = await this.playTTS(text, options);
            }

            // 2. Je≈õli TTS nie dzia≈Ça, pr√≥buj Google TTS
            if (!success) {
                console.log('üåê Pr√≥bujƒô Google TTS...');
                success = await this.playGoogleTTS(text, options);
            }

            // 3. Ostatnia szansa - ResponsiveVoice CDN
            if (!success) {
                console.log('üìª Pr√≥bujƒô ResponsiveVoice...');
                success = await this.playResponsiveVoice(text, options);
            }

            if (success) {
                this.updateAudioButton('success', 'üîä Odtwarzam...', buttonSelector);
                
                // Powiadomienie o sukcesie
                if (window.NotificationManager) {
                    window.NotificationManager.show('Audio odtworzone pomy≈õlnie', 'success', 2000);
                }
            } else {
                throw new Error('Wszystkie metody audio nie powiod≈Çy siƒô');
            }

            return success;

        } catch (error) {
            console.error('‚ùå B≈ÇƒÖd odtwarzania audio:', error);
            this.updateAudioButton('error', '‚ùå B≈ÇƒÖd audio', buttonSelector);
            
            if (window.NotificationManager) {
                window.NotificationManager.show('Nie mo≈ºna odtworzyƒá audio', 'error');
            }
            
            return false;
        } finally {
            // Reset po 3 sekundach
            setTimeout(() => {
                this.isPlaying = false;
                this.resetAudioButton(buttonSelector);
            }, 3000);
        }
    }

    /**
     * Speech Synthesis (wbudowane w przeglƒÖdarkƒô)
     */
    async playTTS(text, options = {}) {
        if (!this.speechSynthesis || !this.voiceSettings.voice) {
            return false;
        }

        return new Promise((resolve) => {
            try {
                // Zatrzymaj poprzednie odtwarzanie
                this.speechSynthesis.cancel();

                const utterance = new SpeechSynthesisUtterance(text);
                
                // Konfiguracja g≈Çosu
                utterance.voice = this.voiceSettings.voice;
                utterance.rate = options.rate || 0.9; // Trochƒô wolniej dla lepszego zrozumienia
                utterance.pitch = options.pitch || 1.0;
                utterance.volume = options.volume || this.volume;
                utterance.lang = options.lang || 'en-US';

                // Event handlers
                utterance.onstart = () => {
                    console.log('üé§ TTS rozpoczƒôte');
                };

                utterance.onend = () => {
                    console.log('‚úÖ TTS zako≈Ñczone');
                    resolve(true);
                };

                utterance.onerror = (event) => {
                    console.error('‚ùå TTS b≈ÇƒÖd:', event.error);
                    resolve(false);
                };

                // Rozpocznij odtwarzanie
                this.speechSynthesis.speak(utterance);
                this.currentAudio = utterance;

                // Timeout zabezpieczajƒÖcy (10 sekund)
                setTimeout(() => {
                    if (utterance && !utterance.ended) {
                        this.speechSynthesis.cancel();
                        resolve(false);
                    }
                }, 10000);

            } catch (error) {
                console.error('‚ùå TTS exception:', error);
                resolve(false);
            }
        });
    }

    /**
     * Google Translate TTS (nowy spos√≥b)
     */
    async playGoogleTTS(text, options = {}) {
        try {
            // Nowy, dzia≈ÇajƒÖcy URL Google TTS
            const lang = options.lang || 'en';
            const encodedText = encodeURIComponent(text);
            
            // R√≥≈ºne URL-e do wypr√≥bowania
            const urls = [
                `https://translate.googleapis.com/translate_tts?ie=UTF-8&q=${encodedText}&tl=${lang}&client=gtx`,
                `https://translate.google.com/translate_tts?ie=UTF-8&q=${encodedText}&tl=${lang}&client=gtx&tk=421659.421659`,
                `https://translate.google.com/translate_tts?ie=UTF-8&q=${encodedText}&tl=${lang}&client=tw-ob`
            ];

            for (const url of urls) {
                try {
                    console.log(`üåê Pr√≥bujƒô URL: ${url}`);
                    const success = await this.playAudioFromUrl(url);
                    if (success) {
                        console.log('‚úÖ Google TTS sukces');
                        return true;
                    }
                } catch (error) {
                    console.warn(`‚ö†Ô∏è URL nie powi√≥d≈Ç siƒô: ${error.message}`);
                    continue;
                }
            }

            return false;

        } catch (error) {
            console.error('‚ùå Google TTS b≈ÇƒÖd:', error);
            return false;
        }
    }

    /**
     * ResponsiveVoice jako fallback
     */
    async playResponsiveVoice(text, options = {}) {
        return new Promise((resolve) => {
            try {
                // Sprawd≈∫ czy ResponsiveVoice jest dostƒôpne
                if (typeof responsiveVoice === 'undefined') {
                    // Za≈Çaduj ResponsiveVoice dynamicznie
                    this.loadResponsiveVoice().then(() => {
                        this.playResponsiveVoiceActual(text, options, resolve);
                    }).catch(() => {
                        resolve(false);
                    });
                } else {
                    this.playResponsiveVoiceActual(text, options, resolve);
                }
            } catch (error) {
                console.error('‚ùå ResponsiveVoice b≈ÇƒÖd:', error);
                resolve(false);
            }
        });
    }

    /**
     * ≈Åadowanie ResponsiveVoice CDN
     */
    loadResponsiveVoice() {
        return new Promise((resolve, reject) => {
            if (typeof responsiveVoice !== 'undefined') {
                resolve();
                return;
            }

            const script = document.createElement('script');
            script.src = 'https://code.responsivevoice.org/responsivevoice.js?key=FREE';
            script.onload = () => {
                console.log('üìª ResponsiveVoice za≈Çadowane');
                resolve();
            };
            script.onerror = () => {
                console.error('‚ùå Nie mo≈ºna za≈Çadowaƒá ResponsiveVoice');
                reject();
            };
            document.head.appendChild(script);
        });
    }

    /**
     * W≈Ça≈õciwe odtwarzanie ResponsiveVoice
     */
    playResponsiveVoiceActual(text, options, resolve) {
        try {
            responsiveVoice.speak(text, "UK English Female", {
                rate: options.rate || 0.9,
                pitch: options.pitch || 1,
                volume: options.volume || this.volume,
                onstart: () => {
                    console.log('üìª ResponsiveVoice rozpoczƒôte');
                },
                onend: () => {
                    console.log('‚úÖ ResponsiveVoice zako≈Ñczone');
                    resolve(true);
                },
                onerror: () => {
                    console.error('‚ùå ResponsiveVoice b≈ÇƒÖd');
                    resolve(false);
                }
            });
        } catch (error) {
            console.error('‚ùå ResponsiveVoice exception:', error);
            resolve(false);
        }
    }

    /**
     * Odtwarzanie audio z URL
     */
    async playAudioFromUrl(url) {
        return new Promise((resolve) => {
            try {
                const audio = new Audio();
                
                // Event handlers
                audio.oncanplaythrough = () => {
                    audio.play().then(() => {
                        console.log('‚úÖ Audio z URL odtworzone');
                        resolve(true);
                    }).catch(() => {
                        resolve(false);
                    });
                };

                audio.onerror = () => {
                    console.error('‚ùå B≈ÇƒÖd ≈Çadowania audio z URL');
                    resolve(false);
                };

                audio.onended = () => {
                    console.log('‚úÖ Audio zako≈Ñczone');
                };

                // Ustaw ≈∫r√≥d≈Ço
                audio.volume = this.volume;
                audio.src = url;
                this.currentAudio = audio;

                // Timeout
                setTimeout(() => {
                    if (audio.readyState < 3) { // HAVE_FUTURE_DATA
                        resolve(false);
                    }
                }, 5000);

            } catch (error) {
                console.error('‚ùå B≈ÇƒÖd odtwarzania z URL:', error);
                resolve(false);
            }
        });
    }

    /**
     * Odtwarzanie zdania przyk≈Çadowego
     */
    async playSentence(englishSentence, polishSentence = null) {
        console.log('üìù Odtwarzam zdanie przyk≈Çadowe...');
        
        if (!englishSentence) {
            console.warn('‚ö†Ô∏è Brak zdania do odtworzenia');
            return false;
        }

        // Odtwarzaj tylko angielskie zdanie
        return await this.playAudio(englishSentence, { 
            rate: 0.8, // Wolniej dla zda≈Ñ
            lang: 'en' 
        });
    }

    /**
     * Zatrzymanie odtwarzania
     */
    stopAudio() {
        console.log('‚èπÔ∏è Zatrzymujƒô audio...');
        
        if (this.currentAudio) {
            if (this.speechSynthesis && this.currentAudio instanceof SpeechSynthesisUtterance) {
                this.speechSynthesis.cancel();
            } else if (this.currentAudio instanceof Audio) {
                this.currentAudio.pause();
                this.currentAudio.currentTime = 0;
            } else if (typeof responsiveVoice !== 'undefined') {
                responsiveVoice.cancel();
            }
            this.currentAudio = null;
        }
        
        this.isPlaying = false;
        this.resetAudioButton();
    }

    /**
     * Aktualizacja przycisku audio
     */
    updateAudioButton(state, text, targetSelector = null) {
        // Je≈õli podano konkretny selektor, aktualizuj tylko ten przycisk
        if (targetSelector) {
            const button = document.querySelector(targetSelector);
            if (button) {
                button.className = button.className.replace(/\b(loading|success|error)\b/g, '').trim();
                if (state !== 'reset') {
                    button.className += ` ${state}`;
                }
                button.textContent = text;
                button.disabled = (state === 'loading');
            }
            return;
        }

        // Stara logika - aktualizuj wszystkie (fallback)
        const audioButtons = document.querySelectorAll('.audio-btn, .sentence-audio-btn');
        audioButtons.forEach(btn => {
            btn.className = btn.className.replace(/\b(loading|success|error)\b/g, '').trim();
            if (state !== 'reset') {
                btn.className += ` ${state}`;
            }
            btn.textContent = text;
            btn.disabled = (state === 'loading');
        });
    }

    /**
     * Reset przycisku audio
     */
    resetAudioButton(targetSelector = null) {
        if (targetSelector) {
            const button = document.querySelector(targetSelector);
            if (button) {
                button.className = button.className.replace(/\b(loading|success|error)\b/g, '').trim();
                
                // Ustaw odpowiedni tekst w zale≈ºno≈õci od typu przycisku
                if (button.classList.contains('sentence-audio-btn')) {
                    button.textContent = 'üéµ Pos≈Çuchaj zdania';
                } else {
                    button.textContent = 'üîä Pos≈Çuchaj s≈Çowa';
                }
                button.disabled = false;
            }
            return;
        }

        // Stara logika - resetuj wszystkie
        const audioButtons = document.querySelectorAll('.audio-btn, .sentence-audio-btn');
        audioButtons.forEach(btn => {
            btn.className = btn.className.replace(/\b(loading|success|error)\b/g, '').trim();
            if (btn.classList.contains('sentence-audio-btn')) {
                btn.textContent = 'üéµ Pos≈Çuchaj zdania';
            } else {
                btn.textContent = 'üîä Pos≈Çuchaj s≈Çowa';
            }
            btn.disabled = false;
        });
    }

    /**
     * Testowanie dostƒôpno≈õci audio
     */
    async testAudio() {
        console.log('üß™ Testowanie system√≥w audio...');
        
        const testText = "Hello, this is a test.";
        const results = {
            speechSynthesis: false,
            googleTTS: false,
            responsiveVoice: false
        };

        // Test Speech Synthesis
        try {
            results.speechSynthesis = await this.playTTS(testText);
            console.log(`üé§ Speech Synthesis: ${results.speechSynthesis ? '‚úÖ' : '‚ùå'}`);
        } catch (e) {
            console.log('üé§ Speech Synthesis: ‚ùå');
        }

        // Test Google TTS
        try {
            results.googleTTS = await this.playGoogleTTS(testText);
            console.log(`üåê Google TTS: ${results.googleTTS ? '‚úÖ' : '‚ùå'}`);
        } catch (e) {
            console.log('üåê Google TTS: ‚ùå');
        }

        // Test ResponsiveVoice
        try {
            results.responsiveVoice = await this.playResponsiveVoice(testText);
            console.log(`üìª ResponsiveVoice: ${results.responsiveVoice ? '‚úÖ' : '‚ùå'}`);
        } catch (e) {
            console.log('üìª ResponsiveVoice: ‚ùå');
        }

        return results;
    }

    /**
     * Ustawienia
     */
    setAutoPlay(enabled) {
        this.autoPlay = enabled;
        console.log(`üîÑ AutoPlay: ${enabled ? 'w≈ÇƒÖczone' : 'wy≈ÇƒÖczone'}`);
    }

    setVolume(volume) {
        this.volume = Math.max(0, Math.min(1, volume));
        console.log(`üîä G≈Ço≈õno≈õƒá: ${Math.round(this.volume * 100)}%`);
    }

    setRate(rate) {
        this.voiceSettings.rate = Math.max(0.1, Math.min(2, rate));
        console.log(`‚ö° Szybko≈õƒá: ${this.voiceSettings.rate}`);
    }

    /**
     * Czyszczenie zasob√≥w
     */
    cleanup() {
        console.log('üßπ Czyszczenie AudioManager...');
        this.stopAudio();
        this.audioCache.clear();
        this.currentAudio = null;
        this.isPlaying = false;
    }
}

// Export dla modu≈Ç√≥w
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AudioManager;
}

// Globalne udostƒôpnienie
if (typeof window !== 'undefined') {
    window.AudioManager = AudioManager;
    console.log('‚úÖ AudioManager dostƒôpny globalnie');
}