/**
 * FlashcardManager - POPRAWKA WIZUALNEJ AKTUALIZACJI PRZYCISKU TRUDNO≈öCI
 * G≈Ç√≥wna zmiana: dodano animacjƒô i natychmiastowƒÖ aktualizacjƒô przycisku
 */

class FlashcardManager {
    constructor() {
        this.vocabulary = null;
        this.currentWord = null;
        this.showPhonetics = true;
        this.imageManager = null;
        this.audioManager = null;
    }

    /**
     * Ustawienie danych s≈Çownictwa
     */
    setVocabulary(vocabulary) {
        this.vocabulary = vocabulary;
    }

    /**
     * Ustawienie mened≈ºer√≥w pomocniczych
     */
    setManagers(imageManager, audioManager) {
        this.imageManager = imageManager;
        this.audioManager = audioManager;
    }

    /**
     * Ustawienie czy pokazywaƒá fonetykƒô
     */
    setShowPhonetics(show) {
        this.showPhonetics = show;
        if (this.currentWord) {
            this.updatePhoneticDisplay();
        }
    }

    /**
     * Wy≈õwietlenie s≈Çowa na karcie - ZAKTUALIZOWANA WERSJA
     */
    displayWord(word, mode = 'flashcards') {
        this.currentWord = word;
        
        console.log(`üì± Wy≈õwietlam s≈Çowo: ${word.english} (${mode})`);
        
        switch (mode) {
            case 'flashcards':
                this.displayFlashcard(word);
                break;
            case 'sentences':
                this.displaySentenceCard(word);
                break;
            default:
                this.displayFlashcard(word);
        }
    }

    /**
     * Wy≈õwietlenie standardowej fiszki
     */
    displayFlashcard(word) {
        const cardFront = document.getElementById('card-front');
        const cardBack = document.getElementById('card-back');

        if (!cardFront || !cardBack) return;

        // Wyczy≈õƒá poprzedniƒÖ zawarto≈õƒá
        cardFront.innerHTML = '';
        cardBack.innerHTML = '';

        // Prz√≥d karty (angielski)
        this.buildCardFront(cardFront, word);

        // Ty≈Ç karty (polski + szczeg√≥≈Çy)
        this.buildCardBack(cardBack, word);
    }

    /**
     * Wy≈õwietlenie karty z przyk≈Çadami zda≈Ñ
     */
    displaySentenceCard(word) {
        const cardFront = document.getElementById('card-front');
        const cardBack = document.getElementById('card-back');

        if (!cardFront || !cardBack) return;

        cardFront.innerHTML = '';
        cardBack.innerHTML = '';

        // Prz√≥d - angielskie zdanie
        this.buildSentenceFront(cardFront, word);

        // Ty≈Ç - polskie t≈Çumaczenie + szczeg√≥≈Çy
        this.buildSentenceBack(cardBack, word);
    }

    /**
     * Budowanie przodu standardowej karty
     */
    buildCardFront(container, word) {
        // Obrazek je≈õli dostƒôpny
        this.addImageSection(container, word);

        // Typ s≈Çowa
        if (word.type) {
            const typeEl = this.createElement('div', 'word-type', word.type);
            typeEl.classList.add(this.getTypeClass(word.type));
            container.appendChild(typeEl);
        }

        // G≈Ç√≥wne angielskie s≈Çowo
        const englishEl = this.createElement('div', 'english-word', word.english);
        container.appendChild(englishEl);

        // Poziom trudno≈õci
        const currentDifficulty = this.getWordDifficulty(word);
        if (currentDifficulty) {
            const difficultyEl = this.createElement('div', 'difficulty-badge');
            difficultyEl.classList.add(`difficulty-${currentDifficulty}`);
            difficultyEl.textContent = this.getDifficultyLabel(currentDifficulty);
            container.appendChild(difficultyEl);
        }

        // Czƒôstotliwo≈õƒá u≈ºycia
        if (word.frequency) {
            const frequencyEl = this.createElement('div', 'frequency-badge');
            frequencyEl.classList.add(`frequency-${word.frequency}`);
            frequencyEl.textContent = this.getFrequencyLabel(word.frequency);
            container.appendChild(frequencyEl);
        }
    }

    /**
     * Budowanie ty≈Çu standardowej karty
     */
    buildCardBack(container, word) {
        // Polskie t≈Çumaczenie
        const polishEl = this.createElement('div', 'polish-translation', word.polish);
        container.appendChild(polishEl);

        // Wymowa
        if (word.pronunciation) {
            const pronunciationEl = this.createElement('div', 'pronunciation', word.pronunciation);
            container.appendChild(pronunciationEl);
        }

        // Fonetyka (je≈õli w≈ÇƒÖczona)
        if (this.showPhonetics && word.phonetic) {
            const phoneticEl = this.createElement('div', 'phonetic', word.phonetic);
            container.appendChild(phoneticEl);
        }

        // Przyk≈Çad zdania
        if (word.examples) {
            this.addExampleSection(container, word.examples);
        }

        // Synonimy i antonimy
        this.addRelatedWords(container, word);

        // Przycisk audio
        if (word.english) {
            this.addAudioButton(container, word.english);
        }

        // Dodatkowe kontrolki
        this.addWordControls(container, word);
    }

    /**
     * Budowanie przodu karty zdaniowej
     */
    buildSentenceFront(container, word) {
        if (!word.examples) return;

        // Nag≈Ç√≥wek
        const headerEl = this.createElement('div', 'sentence-header', 'Przyk≈Çad u≈ºycia:');
        container.appendChild(headerEl);

        // Angielskie zdanie
        const sentenceEl = this.createElement('div', 'sentence-english', word.examples.english);
        container.appendChild(sentenceEl);

        // Pod≈õwietlenie g≈Ç√≥wnego s≈Çowa w zdaniu
        this.highlightWordInSentence(sentenceEl, word.english);

        // S≈Çowo w kontek≈õcie
        const contextEl = this.createElement('div', 'word-context');
        contextEl.innerHTML = `S≈Çowo: <strong>${word.english}</strong> ‚Üí <strong>${word.polish}</strong>`;
        container.appendChild(contextEl);
    }

    /**
     * Budowanie ty≈Çu karty zdaniowej
     */
    buildSentenceBack(container, word) {
        if (!word.examples) return;

        // Polskie t≈Çumaczenie zdania
        const polishSentenceEl = this.createElement('div', 'sentence-polish', word.examples.polish);
        container.appendChild(polishSentenceEl);

        // Szczeg√≥≈Çy s≈Çowa
        const detailsEl = this.createElement('div', 'word-details');
        
        const wordInfoEl = this.createElement('div', 'word-info');
        wordInfoEl.innerHTML = `
            <div class="detail-item">
                <span class="label">S≈Çowo:</span>
                <span class="value">${word.english} ‚Üí ${word.polish}</span>
            </div>
        `;

        if (word.type) {
            const typeItem = this.createElement('div', 'detail-item');
            typeItem.innerHTML = `
                <span class="label">Typ:</span>
                <span class="value">${word.type}</span>
            `;
            wordInfoEl.appendChild(typeItem);
        }

        if (word.pronunciation) {
            const pronItem = this.createElement('div', 'detail-item');
            pronItem.innerHTML = `
                <span class="label">Wymowa:</span>
                <span class="value">${word.pronunciation}</span>
            `;
            wordInfoEl.appendChild(pronItem);
        }

        detailsEl.appendChild(wordInfoEl);
        container.appendChild(detailsEl);

        // Przycisk audio
        if (word.english) {
            this.addAudioButton(container, word.english);
        }
    }

    /**
     * Dodawanie sekcji obrazka
     */
    addImageSection(container, word) {
        if (!this.imageManager) return;

        const wordId = this.getWordId(word);
        const savedImage = this.imageManager.getImage(wordId);

        if (savedImage) {
            const imageEl = this.createElement('img', 'word-image');
            imageEl.src = savedImage;
            imageEl.alt = `Obrazek dla: ${word.polish}`;
            imageEl.loading = 'lazy';
            
            // Dodaj kontrolki obrazka
            const imageWrapper = this.createElement('div', 'image-wrapper');
            imageWrapper.appendChild(imageEl);
            
            const controls = this.createImageControls(wordId, word);
            imageWrapper.appendChild(controls);
            
            container.appendChild(imageWrapper);
        } else {
            // Przycisk dodawania obrazka
            const addImageBtn = this.createElement('button', 'add-image-btn');
            addImageBtn.innerHTML = `
                <span class="icon">üì∑</span>
                <span class="text">Dodaj obrazek</span>
            `;
            addImageBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                this.openImageManager(wordId, word);
            });
            container.appendChild(addImageBtn);
        }
    }

    addExampleSection(container, examples) {
        const exampleEl = this.createElement('div', 'example-sentence');
        
        const englishEl = this.createElement('div', 'sentence-english', examples.english);
        const polishEl = this.createElement('div', 'sentence-polish', examples.polish);
        
        exampleEl.appendChild(englishEl);
        exampleEl.appendChild(polishEl);
        
        // ZAKTUALIZOWANY przycisk audio dla zdania
        if (examples.english) {
            const sentenceAudioBtn = this.createElement('button', 'sentence-audio-btn');
            sentenceAudioBtn.innerHTML = `
                <span class="icon">üéµ</span>
                <span class="text">Pos≈Çuchaj zdania</span>
            `;
            
            sentenceAudioBtn.setAttribute('data-audio-text', examples.english);
            sentenceAudioBtn.setAttribute('data-audio-type', 'sentence');
            
            sentenceAudioBtn.addEventListener('click', async (e) => {
                e.stopPropagation();
                console.log(`üéµ Klikniƒôto przycisk audio dla zdania: "${examples.english}"`);
                
                if (this.audioManager) {
                    // Przeka≈º selektor konkretnego przycisku
                    const success = await this.audioManager.playAudio(examples.english, { rate: 0.8 }, '.sentence-audio-btn');
                    if (!success) {
                        console.error('‚ùå Nie uda≈Ço siƒô odtworzyƒá audio zdania');
                    }
                }
            });
            
            exampleEl.appendChild(sentenceAudioBtn);
        }
        
        container.appendChild(exampleEl);
    }

    /**
     * Dodawanie powiƒÖzanych s≈Ç√≥w (synonimy, antonimy)
     */
    addRelatedWords(container, word) {
        if (!word.synonyms && !word.antonyms) return;

        const relatedEl = this.createElement('div', 'related-words');

        if (word.synonyms && word.synonyms.length > 0) {
            const synonymsEl = this.createElement('div', 'synonyms');
            synonymsEl.innerHTML = `
                <span class="label">Synonimy:</span>
                <span class="words">${word.synonyms.join(', ')}</span>
            `;
            relatedEl.appendChild(synonymsEl);
        }

        if (word.antonyms && word.antonyms.length > 0) {
            const antonymsEl = this.createElement('div', 'antonyms');
            antonymsEl.innerHTML = `
                <span class="label">Antonimy:</span>
                <span class="words">${word.antonyms.join(', ')}</span>
            `;
            relatedEl.appendChild(antonymsEl);
        }

        container.appendChild(relatedEl);
    }

    /**
     * Dodawanie przycisku audio - ZAKTUALIZOWANA WERSJA
     */
    addAudioButton(container, text) {
        const audioBtn = this.createElement('button', 'audio-btn word-audio-btn');
        audioBtn.innerHTML = `
            <span class="icon">üîä</span>
            <span class="text">Pos≈Çuchaj s≈Çowa</span>
        `;
        
        // Dodaj atrybut dla ≈Çatwiejszego debugowania
        audioBtn.setAttribute('data-audio-text', text);
        audioBtn.setAttribute('data-audio-type', 'word');
        
        audioBtn.addEventListener('click', async (e) => {
            e.stopPropagation();
            console.log(`üîä Klikniƒôto przycisk audio dla s≈Çowa: "${text}"`);
            
            if (this.audioManager) {
                // Przeka≈º selektor konkretnego przycisku
                const success = await this.audioManager.playAudio(text, {}, '.word-audio-btn');
                if (!success) {
                    console.error('‚ùå Nie uda≈Ço siƒô odtworzyƒá audio s≈Çowa');
                }
            } else {
                console.error('‚ùå AudioManager nie jest dostƒôpny');
                
                // Fallback - pokazuj komunikat
                if (window.NotificationManager) {
                    window.NotificationManager.show('AudioManager nie jest zainicjalizowany', 'error');
                }
            }
        });

        container.appendChild(audioBtn);
    }

    /**
     * NOWA METODA: Auto-play audio je≈õli w≈ÇƒÖczone
     */
    autoPlayAudio(text) {
        if (this.audioManager && this.audioManager.autoPlay && text) {
            setTimeout(() => {
                this.audioManager.playAudio(text);
            }, 500); // Ma≈Çe op√≥≈∫nienie ≈ºeby karta siƒô za≈Çadowa≈Ça
        }
    }

    /**
     * NOWA METODA: Test audio dla bie≈ºƒÖcego s≈Çowa
     */
    async testCurrentWordAudio() {
        if (!this.currentWord || !this.audioManager) {
            console.warn('‚ö†Ô∏è Brak s≈Çowa lub AudioManager do testu');
            return false;
        }

        console.log('üß™ Testujƒô audio dla bie≈ºƒÖcego s≈Çowa...');
        
        const success = await this.audioManager.playAudio(this.currentWord.english);
        
        if (success) {
            console.log('‚úÖ Test audio pomy≈õlny');
            if (window.NotificationManager) {
                window.NotificationManager.show('Audio dzia≈Ça poprawnie!', 'success');
            }
        } else {
            console.error('‚ùå Test audio nieudany');
            if (window.NotificationManager) {
                window.NotificationManager.show('Problem z audio. Sprawd≈∫ konsole.', 'error');
            }
        }
        
        return success;
    }

    /**
     * NOWA METODA: Toggle auto-play
     */
    toggleAutoPlay() {
        if (this.audioManager) {
            const newState = !this.audioManager.autoPlay;
            this.audioManager.setAutoPlay(newState);
            
            if (window.NotificationManager) {
                window.NotificationManager.show(
                    `Auto-play ${newState ? 'w≈ÇƒÖczone' : 'wy≈ÇƒÖczone'}`, 
                    'info'
                );
            }
            
            return newState;
        }
        return false;
    }

    /**
     * ‚ú® NAPRAWIONE: Dodawanie kontrolek s≈Çowa z pe≈ÇnƒÖ obs≈ÇugƒÖ trudno≈õci
     */
    addWordControls(container, word) {
        const controlsEl = this.createElement('div', 'word-controls');

        // ‚≠ê NAPRAWIONY przycisk trudno≈õci - z pe≈ÇnƒÖ obs≈ÇugƒÖ
        const difficultyBtn = this.createElement('button', 'control-btn difficulty-btn');
        
        // üìä Pobierz aktualny poziom trudno≈õci
        const currentDifficulty = this.getWordDifficulty(word);
        
        // üé® Ustaw wyglƒÖd przycisku na podstawie aktualnej trudno≈õci
        this.updateDifficultyButton(difficultyBtn, currentDifficulty);
        
        // üîß NAPRAWIONY event listener z pe≈ÇnƒÖ obs≈ÇugƒÖ
        difficultyBtn.addEventListener('click', (e) => {
            e.stopPropagation(); // Zatrzymaj propagacjƒô by nie obracaƒá karty
            console.log(`‚≠ê Klikniƒôto przycisk trudno≈õci dla s≈Çowa: ${word.english}`);
            
            // ‚ú® NOWE: Dodaj animacjƒô klikniƒôcia
            this.addClickAnimation(difficultyBtn);
            
            // üìù Toggle difficulty i otrzymaj nowy poziom
            const newDifficulty = this.toggleDifficulty(word);
            
            // üé® Natychmiast zaktualizuj wizualnie przycisk z animacjƒÖ
            setTimeout(() => {
                this.updateDifficultyButton(difficultyBtn, newDifficulty);
                this.addChangeAnimation(difficultyBtn);
                
                // ‚ú® NOWE: Aktualizuj r√≥wnie≈º badge na przodzie karty
                this.updateDifficultyBadge(word);
            }, 100);
            
            // üì¢ Poka≈º powiadomienie u≈ºytkownikowi
            this.showDifficultyNotification(word, newDifficulty);
            
            console.log(`‚úÖ Trudno≈õƒá zmieniona na: ${newDifficulty} dla s≈Çowa: ${word.english}`);
        });

        // ‚úÖ NAPRAWIONY przycisk ulubionych
        const bookmarkBtn = this.createElement('button', 'control-btn bookmark-btn');
        
        // üìä Sprawd≈∫ aktualny stan bookmark
        const isBookmarked = this.isWordBookmarked(word);
        
        // üé® Uaktualnij ikonƒô i tekst na podstawie stanu
        this.updateBookmarkButton(bookmarkBtn, isBookmarked);
        
        // üîß NAPRAWIONY event listener
        bookmarkBtn.addEventListener('click', (e) => {
            e.stopPropagation(); // Zatrzymaj propagacjƒô by nie obracaƒá karty
            console.log(`üîñ Klikniƒôto bookmark dla s≈Çowa: ${word.english}`);
            
            // ‚ú® NOWE: Dodaj animacjƒô klikniƒôcia
            this.addClickAnimation(bookmarkBtn);
            
            // üìù Toggle bookmark i otrzymaj nowy stan
            const newState = this.toggleBookmark(word);
            
            // üé® Natychmiast zaktualizuj wizualnie przycisk
            setTimeout(() => {
                this.updateBookmarkButton(bookmarkBtn, newState);
                this.addChangeAnimation(bookmarkBtn);
            }, 100);
            
            // üì¢ Poka≈º powiadomienie u≈ºytkownikowi
            this.showBookmarkNotification(word, newState);
            
            // üìä Zaktualizuj statystyki w aplikacji
            if (window.englishFlashcardsApp) {
                window.englishFlashcardsApp.updateStats();
            }
            
            console.log(`‚úÖ Bookmark ${newState ? 'dodany' : 'usuniƒôty'} dla s≈Çowa: ${word.english}`);
        });

        // üìé Dodaj przyciski do kontenera
        controlsEl.appendChild(difficultyBtn);
        controlsEl.appendChild(bookmarkBtn);
        container.appendChild(controlsEl);
    }

    /**
     * ‚ú® NOWA METODA: Animacja klikniƒôcia
     */
    addClickAnimation(button) {
        // Usu≈Ñ poprzednie animacje
        button.classList.remove('click-animation', 'change-animation');
        
        // Dodaj animacjƒô klikniƒôcia
        button.classList.add('click-animation');
        
        // Usu≈Ñ animacjƒô po zako≈Ñczeniu
        setTimeout(() => {
            button.classList.remove('click-animation');
        }, 200);
    }

    /**
     * ‚ú® NOWA METODA: Animacja zmiany
     */
    addChangeAnimation(button) {
        // Dodaj animacjƒô zmiany
        button.classList.add('change-animation');
        
        // Usu≈Ñ animacjƒô po zako≈Ñczeniu
        setTimeout(() => {
            button.classList.remove('change-animation');
        }, 600);
    }

    /**
     * ‚ú® NOWA METODA: Pobranie aktualnego poziomu trudno≈õci s≈Çowa
     */
    getWordDifficulty(word) {
        // Najpierw sprawd≈∫ ProgressManager (aktualny stan)
        if (window.englishFlashcardsApp && window.englishFlashcardsApp.managers.progress) {
            try {
                const currentDifficulty = window.englishFlashcardsApp.managers.progress.getWordDifficulty(word);
                return currentDifficulty;
            } catch (error) {
                console.warn('‚ö†Ô∏è B≈ÇƒÖd pobierania trudno≈õci z ProgressManager:', error);
            }
        }
        
        // Fallback - oryginalna trudno≈õƒá s≈Çowa
        return word.difficulty || 'medium';
    }

    /**
     * ‚ú® NOWA METODA: Aktualizacja wyglƒÖdu przycisku trudno≈õci z animacjƒÖ
     */
    updateDifficultyButton(button, difficulty) {
        // üé® R√≥≈ºne ikony i kolory dla r√≥≈ºnych poziom√≥w trudno≈õci
        const difficultyConfig = {
            'easy': { icon: '‚≠ê', text: '≈Åatwe', class: 'easy' },
            'medium': { icon: '‚≠ê‚≠ê', text: '≈örednie', class: 'medium' },
            'hard': { icon: '‚≠ê‚≠ê‚≠ê', text: 'Trudne', class: 'hard' }
        };
        
        const config = difficultyConfig[difficulty] || difficultyConfig['medium'];
        
        // üìù Aktualizuj zawarto≈õƒá przycisku z p≈ÇynnƒÖ animacjƒÖ
        const currentIcon = button.querySelector('.icon');
        const currentText = button.querySelector('.text');
        
        if (currentIcon && currentText) {
            // Animacja zmiany zawarto≈õci
            button.style.transform = 'scale(0.95)';
            button.style.opacity = '0.7';
            
            setTimeout(() => {
                currentIcon.textContent = config.icon;
                currentText.textContent = config.text;
                
                // üé≠ Aktualizuj klasy CSS dla stylowania
                button.classList.remove('easy', 'medium', 'hard');
                button.classList.add(config.class);
                
                // Przywr√≥ƒá normalny wyglƒÖd
                button.style.transform = 'scale(1)';
                button.style.opacity = '1';
            }, 150);
        } else {
            // Fallback - ustaw zawarto≈õƒá bezpo≈õrednio
            button.innerHTML = `
                <span class="icon">${config.icon}</span>
                <span class="text">${config.text}</span>
            `;
            
            // üé≠ Aktualizuj klasy CSS dla stylowania
            button.classList.remove('easy', 'medium', 'hard');
            button.classList.add(config.class);
        }
        
        // ‚ôø Accessibility - screen readers
        button.setAttribute('aria-label', `Poziom trudno≈õci: ${config.text}`);
        button.setAttribute('title', `Poziom trudno≈õci: ${config.text}. Kliknij aby zmieniƒá.`);
        
        console.log(`üé® Zaktualizowano przycisk trudno≈õci: ${difficulty} (${config.text})`);
    }

    /**
     * ‚ú® NOWA METODA: Powiadomienia o zmianie trudno≈õci
     */
    showDifficultyNotification(word, newDifficulty) {
        // üì¢ Sprawd≈∫ czy NotificationManager jest dostƒôpny
        if (window.NotificationManager) {
            const difficultyLabels = {
                'easy': '≈Åatwe',
                'medium': '≈örednie', 
                'hard': 'Trudne'
            };
            
            const label = difficultyLabels[newDifficulty] || newDifficulty;
            const icon = {
                'easy': '‚≠ê',
                'medium': '‚≠ê‚≠ê', 
                'hard': '‚≠ê‚≠ê‚≠ê'
            }[newDifficulty] || '‚≠ê';
            
            const message = `${icon} "${word.english}" ‚Üí ${label}`;
            
            // üéØ Poka≈º powiadomienie przez 2 sekundy
            window.NotificationManager.show(message, 'info', 2000);
        }
    }

    /**
     * ‚úÖ POPRAWIONA METODA: toggleDifficulty()
     * Dodaj aktualizacjƒô UI quiz√≥w po zmianie trudno≈õci
     */

    // ZASTƒÑP w flashcard-manager.js metodƒô toggleDifficulty():
    toggleDifficulty(word) {
        // üõ°Ô∏è Sprawd≈∫ czy ProgressManager jest dostƒôpny
        if (!window.englishFlashcardsApp || !window.englishFlashcardsApp.managers.progress) {
            console.error('‚ùå ProgressManager nie jest dostƒôpny');
            if (window.NotificationManager) {
                window.NotificationManager.show('B≈ÇƒÖd: Nie mo≈ºna zmieniƒá trudno≈õci', 'error');
            }
            return this.getWordDifficulty(word); // Zwr√≥ƒá aktualnƒÖ trudno≈õƒá
        }
        
        try {
            // üìä Zapisz stan przed zmianƒÖ (dla por√≥wnania)
            const oldDifficulty = this.getWordDifficulty(word);
            
            // ‚úÖ Wywo≈Çaj toggle w ProgressManager i otrzymaj nowy poziom
            const newDifficulty = window.englishFlashcardsApp.managers.progress.toggleWordDifficulty(word);
            
            console.log(`üîÑ Toggle difficulty: ${word.english} ‚Üí ${oldDifficulty} ‚Üí ${newDifficulty}`);
            
            // ‚úÖ NOWE: Aktualizuj UI quiz√≥w trudno≈õci po zmianie
            if (window.englishFlashcardsApp.updateDifficultyQuizUI) {
                console.log('üé® Aktualizujƒô UI quiz√≥w trudno≈õci...');
                window.englishFlashcardsApp.updateDifficultyQuizUI();
            } else {
                console.warn('‚ö†Ô∏è Metoda updateDifficultyQuizUI nie jest dostƒôpna');
            }
            
            // ‚úÖ NOWE: Wy≈õlij event globalny o zmianie trudno≈õci
            document.dispatchEvent(new CustomEvent('wordDifficultyChanged', {
                detail: { 
                    word: word, 
                    oldDifficulty: oldDifficulty,
                    newDifficulty: newDifficulty,
                    wordKey: window.englishFlashcardsApp.managers.progress.getWordKey(word)
                }
            }));
            
            console.log(`üì¢ Event wordDifficultyChanged wys≈Çany dla: ${word.english}`);
            
            return newDifficulty;
            
        } catch (error) {
            console.error('‚ùå B≈ÇƒÖd podczas toggle difficulty:', error);
            
            if (window.NotificationManager) {
                window.NotificationManager.show('B≈ÇƒÖd podczas zmiany trudno≈õci', 'error');
            }
            
            return this.getWordDifficulty(word); // Zwr√≥ƒá aktualnƒÖ trudno≈õƒá jako fallback
        }
    }

    /**
     * ‚ú® NOWA METODA: Od≈õwie≈ºenie stanu przycisku trudno≈õci (do u≈ºycia zewnƒôtrznego)
     */
    refreshDifficultyState(word) {
        const difficultyBtn = document.querySelector('.difficulty-btn');
        if (difficultyBtn && word) {
            const currentDifficulty = this.getWordDifficulty(word);
            this.updateDifficultyButton(difficultyBtn, currentDifficulty);
        }
    }

    updateBookmarkButton(button, isBookmarked) {
        // üé® R√≥≈ºne ikony dla r√≥≈ºnych stan√≥w
        const icon = isBookmarked ? 'üîñ' : '‚ö™'; // Wype≈Çniona vs pusta ikona
        const text = isBookmarked ? 'Usu≈Ñ z trybu powt√≥rki' : 'Dodaj do powt√≥rek';
        const className = isBookmarked ? 'bookmarked' : 'not-bookmarked';
        
        // üìù Aktualizuj zawarto≈õƒá przycisku
        button.innerHTML = `
            <span class="icon">${icon}</span>
            <span class="text">${text}</span>
        `;
        
        // üé≠ Dodaj/usu≈Ñ klasƒô CSS dla stylowania
        button.classList.toggle('active', isBookmarked);
        button.classList.toggle('bookmarked', isBookmarked);
        
        // ‚ôø Accessibility - screen readers
        button.setAttribute('aria-pressed', isBookmarked);
        button.setAttribute('title', text);
    }

    /**
     * ‚ú® NOWA METODA: Powiadomienia o zmianie stanu bookmark
     */
    showBookmarkNotification(word, isBookmarked) {
        // üì¢ Sprawd≈∫ czy NotificationManager jest dostƒôpny
        if (window.NotificationManager) {
            const message = isBookmarked 
                ? `"${word.english}" dodane do powt√≥rek üîñ`
                : `"${word.english}" usuniƒôte z powt√≥rek ‚ö™`;
            
            const type = isBookmarked ? 'success' : 'info';
            
            // üéØ Poka≈º powiadomienie przez 3 sekundy
            window.NotificationManager.show(message, type, 3000);
        }
    }

    /**
     * Tworzenie kontrolek obrazka
     */
    createImageControls(wordId, word) {
        const controls = this.createElement('div', 'image-controls');

        const editBtn = this.createElement('button', 'image-control-btn edit-btn');
        editBtn.innerHTML = '‚úèÔ∏è';
        editBtn.title = 'Zmie≈Ñ obrazek';
        editBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.openImageManager(wordId, word);
        });

        const deleteBtn = this.createElement('button', 'image-control-btn delete-btn');
        deleteBtn.innerHTML = 'üóëÔ∏è';
        deleteBtn.title = 'Usu≈Ñ obrazek';
        deleteBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.deleteWordImage(wordId);
        });

        controls.appendChild(editBtn);
        controls.appendChild(deleteBtn);
        return controls;
    }

    /**
     * Pod≈õwietlanie s≈Çowa w zdaniu
     */
    highlightWordInSentence(sentenceElement, word) {
        const text = sentenceElement.textContent;
        const regex = new RegExp(`\\b(${word})\\b`, 'gi');
        const highlightedText = text.replace(regex, '<mark>$1</mark>');
        sentenceElement.innerHTML = highlightedText;
    }

    /**
     * Aktualizacja wy≈õwietlania fonetyki
     */
    updatePhoneticDisplay() {
        const phoneticEl = document.querySelector('.phonetic');
        if (phoneticEl) {
            phoneticEl.style.display = this.showPhonetics ? 'block' : 'none';
        }
    }

    /**
     * Pomocnicze metody
     */
    createElement(tag, className, textContent) {
        const element = document.createElement(tag);
        if (className) element.className = className;
        if (textContent !== undefined) element.textContent = textContent;
        return element;
    }

    getWordId(word) {
        return `word-${word.id || word.english.toLowerCase().replace(/\s+/g, '-')}`;
    }

    getTypeClass(type) {
        const typeMap = {
            'adjective': 'type-adjective',
            'noun': 'type-noun',
            'verb': 'type-verb',
            'adverb': 'type-adverb'
        };
        return typeMap[type] || 'type-default';
    }

    getDifficultyLabel(difficulty) {
        const labels = {
            'easy': '≈Åatwy',
            'medium': '≈öredni',
            'hard': 'Trudny'
        };
        return labels[difficulty] || difficulty;
    }

    getFrequencyLabel(frequency) {
        const labels = {
            'high': 'Czƒôste',
            'medium': '≈örednie',
            'low': 'Rzadkie'
        };
        return labels[frequency] || frequency;
    }

    toggleBookmark(word) {
        // üõ°Ô∏è Sprawd≈∫ czy ProgressManager jest dostƒôpny
        if (!window.englishFlashcardsApp || !window.englishFlashcardsApp.managers.progress) {
            console.error('‚ùå ProgressManager nie jest dostƒôpny');
            if (window.NotificationManager) {
                window.NotificationManager.show('B≈ÇƒÖd: Nie mo≈ºna zapisaƒá do powt√≥rki', 'error');
            }
            return false;
        }
        
        try {
            // ‚úÖ NOWE: Sprawd≈∫ stan przed usuniƒôciem/dodaniem
            const wasInBookmarksMode = window.englishFlashcardsApp.state?.bookmarksOnlyMode || false;
            const bookmarksCountBefore = window.englishFlashcardsApp.managers.progress.getAllBookmarkedWords().length;
            const isCurrentlyBookmarked = window.englishFlashcardsApp.managers.progress.isWordBookmarked(word);
            
            console.log(`üîñ Stan przed toggle: tryb=${wasInBookmarksMode}, liczba=${bookmarksCountBefore}, bƒôdzie_usuniƒôte=${isCurrentlyBookmarked}`);
            
            // Sprawd≈∫ czy usuwamy ostatnie s≈Çowo w trybie powt√≥rki
            const willBeLastBookmark = isCurrentlyBookmarked && bookmarksCountBefore === 1;
            
            // üìù Wywo≈Çaj toggle w ProgressManager
            const newState = window.englishFlashcardsApp.managers.progress.toggleWordBookmark(word);
            
            console.log(`üîÑ Toggle bookmark: ${word.english} ‚Üí ${newState ? 'dodany' : 'usuniƒôty'}`);
            
            // ‚úÖ NOWE: Wyjd≈∫ z trybu powt√≥rki je≈õli usuniƒôto ostatnie s≈Çowo
            if (wasInBookmarksMode && willBeLastBookmark && !newState) {
                console.log('üö™ To by≈Ço ostatnie s≈Çowo w trybie powt√≥rki - wychodzimy z trybu');
                
                // Wyjd≈∫ z trybu powt√≥rki
                if (window.englishFlashcardsApp.exitBookmarksOnlyMode) {
                    window.englishFlashcardsApp.exitBookmarksOnlyMode();
                    
                    // Poka≈º powiadomienie z op√≥≈∫nieniem
                    setTimeout(() => {
                        if (window.NotificationManager) {
                            window.NotificationManager.show(
                                'üö™ Wyszed≈Çe≈õ z trybu powt√≥rki - brak s≈Ç√≥w do nauki', 
                                'info', 
                                4000
                            );
                        }
                    }, 800);
                } else {
                    console.error('‚ùå Metoda exitBookmarksOnlyMode nie jest dostƒôpna');
                }
            }
            
            return newState;
            
        } catch (error) {
            console.error('‚ùå B≈ÇƒÖd podczas toggle bookmark:', error);
            
            if (window.NotificationManager) {
                window.NotificationManager.show('B≈ÇƒÖd podczas zapisywania powt√≥rki', 'error');
            }
            
            return false;
        }
    }

    isWordBookmarked(word) {
        // üõ°Ô∏è Sprawd≈∫ czy ProgressManager jest dostƒôpny
        if (!window.englishFlashcardsApp || !window.englishFlashcardsApp.managers.progress) {
            console.warn('‚ö†Ô∏è ProgressManager nie jest dostƒôpny');
            return false;
        }
        
        try {
            const isBookmarked = window.englishFlashcardsApp.managers.progress.isWordBookmarked(word);
            console.log(`üîç Sprawdzam bookmark dla ${word.english}: ${isBookmarked}`);
            return isBookmarked;
            
        } catch (error) {
            console.error('‚ùå B≈ÇƒÖd podczas sprawdzania bookmark:', error);
            return false;
        }
    }

    refreshBookmarkState(word) {
        const bookmarkBtn = document.querySelector('.bookmark-btn');
        if (bookmarkBtn && word) {
            const isBookmarked = this.isWordBookmarked(word);
            this.updateBookmarkButton(bookmarkBtn, isBookmarked);
        }
    }


    updateDifficultyBadge(word) {
        const difficultyBadge = document.querySelector('.difficulty-badge');
        if (!difficultyBadge || !word) return;
        
        // üìä Pobierz aktualnƒÖ trudno≈õƒá
        const currentDifficulty = this.getWordDifficulty(word);
        
        // üé® Aktualizuj klasy CSS
        difficultyBadge.className = 'difficulty-badge'; // Reset klas
        difficultyBadge.classList.add(`difficulty-${currentDifficulty}`);
        
        // üìù Aktualizuj tekst
        difficultyBadge.textContent = this.getDifficultyLabel(currentDifficulty);
        
        // ‚ú® Dodaj efekt wizualny zmiany
        difficultyBadge.style.transform = 'scale(1.1)';
        difficultyBadge.style.transition = 'all 0.3s ease';
        
        setTimeout(() => {
            difficultyBadge.style.transform = 'scale(1)';
        }, 300);
        
        console.log(`üé® Zaktualizowano badge trudno≈õci na przodzie: ${currentDifficulty}`);
    }

    openImageManager(wordId, word) {
        if (this.imageManager) {
            this.imageManager.openManagerForWord(wordId, word);
        }
    }

    deleteWordImage(wordId) {
        if (this.imageManager && confirm('Czy na pewno chcesz usunƒÖƒá ten obrazek?')) {
            this.imageManager.deleteImage(wordId);
            // Od≈õwie≈ºenie karty
            if (window.englishFlashcardsApp) {
                window.englishFlashcardsApp.updateCard();
            }
            NotificationManager.show('Obrazek zosta≈Ç usuniƒôty', 'info');
        }
    }

    /**
     * Czyszczenie zasob√≥w
     */
    cleanup() {
        this.vocabulary = null;
        this.currentWord = null;
        this.imageManager = null;
        this.audioManager = null;
    }
}

// Export dla modu≈Ç√≥w
if (typeof module !== 'undefined' && module.exports) {
    module.exports = FlashcardManager;
}